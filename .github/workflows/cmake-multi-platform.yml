name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        build_type: [Release]
        arch: [x64, x86]
        c_compiler: [gcc, clang]
        include:
          - os: windows-latest
            c_compiler: i686-w64-mingw32-gcc
            cpp_compiler: i686-w64-mingw32-g++
            cmake_generator: "MinGW Makefiles"
            cmake_arch: "x86"
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            cmake_generator: ""
            cmake_arch: ""
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            cmake_generator: ""
            cmake_arch: ""
          - os: macOS-latest
            c_compiler: clang
            cpp_compiler: clang++
            cmake_generator: ""
            cmake_arch: ""
          - os: macOS-latest
            c_compiler: gcc
            cpp_compiler: g++
            cmake_generator: ""
            cmake_arch: ""
        exclude:
          - os: windows-latest
            c_compiler: cl
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: windows-latest
          - os: ubuntu-latest
            c_compiler: cl
          - os: macOS-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install MinGW on Windows
      if: runner.os == 'Windows'
      run: |
        choco install mingw -y
        echo "CXX=x86_64-w64-mingw32-g++" >> $GITHUB_ENV
        echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
        echo "CMAKE_GENERATOR=MinGW Makefiles" >> $GITHUB_ENV

    - name: Create build directory
      run: mkdir -p ${{ github.workspace }}/build

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      shell: bash
      run: |
        cmake -B "${{ steps.strings.outputs.build-output-dir }}" \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -S "${{ github.workspace }}"

    - name: Build
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" && "$CMAKE_GENERATOR" == *"Visual Studio"* ]]; then
          cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}
        else
          cmake --build "${{ steps.strings.outputs.build-output-dir }}"
        fi
        
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
